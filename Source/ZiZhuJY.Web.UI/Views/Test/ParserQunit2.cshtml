@{
    ViewBag.Title = "ParserQunit2";
    Layout = "~/Views/Shared/_SimpleLayout.cshtml";
}

@section metas{
    <link href="@Url.Content("~/Scripts/jquery-qunit/qunit/qunit.css")" rel="stylesheet" type="text/css" />
    <style type="text/css">
    </style>
    <script src="@Url.Content("~/Scripts/LaTex/zizhujy.com.LaTexLex.1.2.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/LaTex/zizhujy.com.LaTexParser.1.2.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-qunit/qunit/qunit.js")" type="text/javascript"></script>
    <script type="text/javascript">
    <!--
        (function ($, lex, parser) {
            test("Smoke Test: y = sin(10*x)", function () {
                parser.init("y = sin(10*x)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
            });

            test("BVT", function () {
                parser.init("y = cos(2*x)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x ^ 3");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x/3");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = -x/3");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = 0");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("x = 0");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("x = 5*cos(t); y = 5*sin(t)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x ^ 2");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x ^ -2");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x ^ + 2");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x ^ (-3/2)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^2^3");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = (x^2)^3");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^(2^3)");
                parser.run();

                parser.init("y = sin(x)^2");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = sin(x^2)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^(-2)^3");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^2^-3");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = 2^x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = e^x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = 5^x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = 20^x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^sin(2)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = e^+x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = 8^-x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = 12.897^x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^42.93");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^.98");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = .99^x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^sin(x)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x^-x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = 0.577^-.97");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x.5");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = x*(x+6)*(x-9)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y = tan(x)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y=\\frac{\\sqrt{x}}{2}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
            });

            test("Extended Test (1. Support y = 2x (= 2 * x); 2. Support more Latex Commands)", function () {
                parser.init("y=2x");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));

                parser.init("y-tan\\left(x\\right)=0");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=\\sqrt{\\left(x\\right)}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=\\frac{\\left(e^x-1\\right)}{x}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=-\\frac{x}{3}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=-\\left(\\frac{x}{3}\\right)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=-sin\\left(x\\right)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=-(x/3)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("cos\\left(x\\right)\\cdot tan\\left(y\\right)=1");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=x^2-4-\\frac{x^4}{10}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=x^2-4-\\frac{x^4}{10}+\\frac{3x^6}{1000}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=e^{x-1}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

            });

            test("Support constraints on equation", function () {
                parser.init("x=1;y=5{-2<x;y<2}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("x=cos\\left(t\\right)\\cdot \\frac{t}{3};y=sin\\left(t\\right)\\cdot \\frac{t}{3}\\left\\{0<t<10\\cdot PI\\right\\}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

            });

            test("Support pipe line | | as abs() function", function () {
                parser.init("y=\\left|x+sin\\left(x+\\left|x\\right|\\right)\\right|");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=-\\left|x\\right|");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));
            });

            test("Constant values", function () {
                parser.init("y=\\pi");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=\\PI");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=\\e");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=\\E");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

            });

            test("Abs and negatives", function () {
                parser.init("y=-x^2+\\left|x\\right|");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=-e^{-x}");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=2x^2-3\\left|x\\right|-2");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y-3=3\\left(x-1\\right)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));

                parser.init("y=log\\left(10,x\\right)");
                parser.run();
                equal(parser.errorList.length, 0, "The error list should be a 0 length Array ({0}).".format(parser.source));
                equal(parser.tree.isValid(), true, "The equation ({0}) should be treated as a valid equation.".format(parser.source));
            });
        })(jQuery, zizhujy.com.LaTexLex, zizhujy.com.LaTexParser);
    //-->
    </script>
}
<div id="qunit"></div>
<div id="qunit-fixture">test markup</div>