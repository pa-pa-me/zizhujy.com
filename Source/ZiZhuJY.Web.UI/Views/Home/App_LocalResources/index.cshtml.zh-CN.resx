<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Title" xml:space="preserve">
    <value>紫竹叽歪 -- 田杰做的一堆在线工具。</value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>简介 </value>
  </data>
  <data name="Story" xml:space="preserve">
    <value>2011 年我转行开始做程序员，第一家公司在上海的紫竹科技园，为纪念这一事件，我开设此网站并以“紫竹”命名。“叽歪”的意思是我以这个网站为平台，向这个世界发出一些声音。

我正自学数学，所以做了一些数学方面的工具，比如“函数画图”、“统计计算器”、“极客计算器”、“矩阵计算器”等。在我的学习过程中，我简直离不开它们。为什么要自己做呢？因为第一我是程序员所以我有能力做；第二是因为别人做的没有一个能够满足我的需要和符合我的使用习惯。

比如，几年前找不到一个能够画隐函数的快速的免费的在线的函数画图工具，所以就有了“趣涂函数画图”。又比如，找不到一款能够输入多行算式、支持分数显示以及将小数转换为分数的计算器（我简直惊呆了），于是就有了“极客计算器”。</value>
  </data>
  <data name="OnlineTools" xml:space="preserve">
    <value>在线工具</value>
  </data>
  <data name="SocialLinks.Label.Facebook" xml:space="preserve">
    <value>脸谱：</value>
  </data>
  <data name="SocialLinks.Label.QQ" xml:space="preserve">
    <value>QQ：</value>
  </data>
  <data name="SocialLinks.Label.Renren" xml:space="preserve">
    <value>人人：</value>
  </data>
  <data name="SocialLinks.Label.Weibo" xml:space="preserve">
    <value>新浪微博：</value>
  </data>
  <data name="SocialLinks.Title.Facebook" xml:space="preserve">
    <value>Jeff Tian</value>
  </data>
  <data name="SoialLinks.Title.Renren" xml:space="preserve">
    <value>田杰</value>
  </data>
  <data name="SocialLinks.Label.Github" xml:space="preserve">
    <value>Github:</value>
  </data>
  <data name="SocialLinks.Title.Github" xml:space="preserve">
    <value>Jeff-Tian </value>
  </data>
  <data name="BlogFeeds" xml:space="preserve">
    <value>最新博文：</value>
  </data>
  <data name="ContactInfo" xml:space="preserve">
    <value>联系方式：</value>
  </data>
  <data name="SeoKeywords" xml:space="preserve">
    <value>在线工具, 函数画图, 统计计算器, 极客计算器, 矩阵计算器, 网页转换成 PDF, 图生成器, 回归计算器</value>
  </data>
  <data name="SeoDescription" xml:space="preserve">
    <value>田杰做的一堆在线工具 -- 函数画图、回归统计计算器、极客计算器、矩阵计算器、网页转换成 PDF、图生成器，等等。</value>
  </data>
</root>