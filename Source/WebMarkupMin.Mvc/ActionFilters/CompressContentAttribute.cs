namespace WebMarkupMin.Mvc.ActionFilters
{
	using System;
	using System.IO;
	using System.Web;
	using System.Web.Mvc;

	using Core;
	using Web;
	using Web.Helpers;

	/// <summary>
	/// Attribute that can be added to controller methods to force content
	/// to be GZip encoded if the client supports it
	/// </summary>
	[AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
	public class CompressContentAttribute : ActionFilterAttribute
	{
		/// <summary>
		/// Override to compress the content that is generated by an action method
		/// </summary>
		/// <param name="filterContext">Filter context</param>
		public override void OnActionExecuting(ActionExecutingContext filterContext)
		{
			if (!WebMarkupMinContext.Current.IsCompressionEnabled())
			{
				return;
			}

			HttpContextBase context = filterContext.HttpContext;

			if (CompressionHelper.IsCompressionSupported(context.Request))
			{
				context.Items["originalResponseFilter"] = context.Response.Filter;
				CompressionHelper.TryCompressContent(context);
			}
		}

		/// <summary>
		/// Override to handle error
		/// </summary>
		/// <param name="filterContext">Filter context</param>
		public override void OnResultExecuted(ResultExecutedContext filterContext)
		{
			if (filterContext.Exception != null)
			{
				HttpContextBase context = filterContext.HttpContext;
				if (context.Items.Contains("originalResponseFilter"))
				{
					var originalResponseFilter = context.Items["originalResponseFilter"] as Stream;
					if (originalResponseFilter != null)
					{
						context.Response.Filter = originalResponseFilter;
					}
				}
			}
		}
	}
}